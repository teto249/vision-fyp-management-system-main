import { toast } from "react-toastify";


interface UniversityResponse {
  id: string;
  shortName: string;
  fullName: string;
  status: "active" | "inactive" | "pending";
  email: string;
  address?: string;
  phone?: string;
  maxStudents?: number;
  maxSupervisors?: number;
  description?: string;
  logoPath?: string;
}

interface UniAdminResponse {
  username: string; // Will be generated by backend
  fullName: string;
  email: string;
  phoneNumber?: string;
  role: "UniAdmin";
}

interface RegistrationResponse {
  message: string;
  university: UniversityResponse;
  admin: UniAdminResponse;
}

const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:3000";

export function validateLogoFile(file: File): boolean {
  const maxSize = 2 * 1024 * 1024; // 2MB
  const allowedTypes = ["image/jpeg", "image/png", "image/gif"];

  if (file.size > maxSize) {
    toast.error("Logo must be less than 2MB");
    return false;
  }
  if (!allowedTypes.includes(file.type)) {
    toast.error("Please upload a valid image file (JPEG, PNG, or GIF)");
    return false;
  }
  return true;
}
export async function registerUniversity(
  formData: FormData
): Promise<RegistrationResponse> {
  try {
    const jsonData = Object.fromEntries(formData.entries());

    const requiredFields = [
      "shortName",
      "fullName",
      "address",
      "email",
      "phone",
      "maxStudents",
      "maxSupervisors",
      "adminFullName", // Removed adminUsername since it's generated
      "adminEmail",
      "adminPhone",
      "adminPassword",
    ];

    const missingFields = requiredFields.filter((field) => !jsonData[field]);
    if (missingFields.length > 0) {
      throw new Error(`Missing required fields: ${missingFields.join(", ")}`);
    }

    const response = await fetch(
      `${API_BASE_URL}/api/admin/registerUniversity`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: `Bearer ${localStorage.getItem("authToken")}`,
        },
        body: JSON.stringify({
          shortName: jsonData.shortName,
          fullName: jsonData.fullName,
          address: jsonData.address,
          email: jsonData.email,
          phone: jsonData.phone,
          maxStudents: parseInt(jsonData.maxStudents as string),
          maxSupervisors: parseInt(jsonData.maxSupervisors as string),
          adminFullName: jsonData.adminFullName,
          adminEmail: jsonData.adminEmail,
          adminPhone: jsonData.adminPhone,
          adminPassword: jsonData.adminPassword,
        }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Registration failed");
    }

    const data = await response.json();
    if (!data.university || !data.admin || !data.admin.username) {
      throw new Error("Invalid response from server");
    }

    toast.success(
      `University registered successfully! Admin username: ${data.admin.username}`
    );
    return data;
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "Registration failed";
    toast.error(message);
    throw error;
  }
}
